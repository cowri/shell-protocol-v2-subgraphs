// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("erc20Wraps", Value.fromStringArray(new Array(0)));
    this.set("erc20Unwraps", Value.fromStringArray(new Array(0)));
    this.set("erc721Wraps", Value.fromStringArray(new Array(0)));
    this.set("erc721Unwraps", Value.fromStringArray(new Array(0)));
    this.set("erc1155Wraps", Value.fromStringArray(new Array(0)));
    this.set("erc1155Unwraps", Value.fromStringArray(new Array(0)));
    this.set("computeInputAmounts", Value.fromStringArray(new Array(0)));
    this.set("computeOutputAmounts", Value.fromStringArray(new Array(0)));
    this.set("transfers", Value.fromStringArray(new Array(0)));
    this.set("createdTimestamp", Value.fromBigInt(BigInt.zero()));
    this.set("userBalances", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type User must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("User", id.toString(), this);
    }
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get erc20Wraps(): Array<string> {
    let value = this.get("erc20Wraps");
    return value!.toStringArray();
  }

  set erc20Wraps(value: Array<string>) {
    this.set("erc20Wraps", Value.fromStringArray(value));
  }

  get erc20Unwraps(): Array<string> {
    let value = this.get("erc20Unwraps");
    return value!.toStringArray();
  }

  set erc20Unwraps(value: Array<string>) {
    this.set("erc20Unwraps", Value.fromStringArray(value));
  }

  get erc721Wraps(): Array<string> {
    let value = this.get("erc721Wraps");
    return value!.toStringArray();
  }

  set erc721Wraps(value: Array<string>) {
    this.set("erc721Wraps", Value.fromStringArray(value));
  }

  get erc721Unwraps(): Array<string> {
    let value = this.get("erc721Unwraps");
    return value!.toStringArray();
  }

  set erc721Unwraps(value: Array<string>) {
    this.set("erc721Unwraps", Value.fromStringArray(value));
  }

  get erc1155Wraps(): Array<string> {
    let value = this.get("erc1155Wraps");
    return value!.toStringArray();
  }

  set erc1155Wraps(value: Array<string>) {
    this.set("erc1155Wraps", Value.fromStringArray(value));
  }

  get erc1155Unwraps(): Array<string> {
    let value = this.get("erc1155Unwraps");
    return value!.toStringArray();
  }

  set erc1155Unwraps(value: Array<string>) {
    this.set("erc1155Unwraps", Value.fromStringArray(value));
  }

  get computeInputAmounts(): Array<string> {
    let value = this.get("computeInputAmounts");
    return value!.toStringArray();
  }

  set computeInputAmounts(value: Array<string>) {
    this.set("computeInputAmounts", Value.fromStringArray(value));
  }

  get computeOutputAmounts(): Array<string> {
    let value = this.get("computeOutputAmounts");
    return value!.toStringArray();
  }

  set computeOutputAmounts(value: Array<string>) {
    this.set("computeOutputAmounts", Value.fromStringArray(value));
  }

  get transfers(): Array<string> {
    let value = this.get("transfers");
    return value!.toStringArray();
  }

  set transfers(value: Array<string>) {
    this.set("transfers", Value.fromStringArray(value));
  }

  get createdTimestamp(): BigInt {
    let value = this.get("createdTimestamp");
    return value!.toBigInt();
  }

  set createdTimestamp(value: BigInt) {
    this.set("createdTimestamp", Value.fromBigInt(value));
  }

  get userBalances(): Array<string> {
    let value = this.get("userBalances");
    return value!.toStringArray();
  }

  set userBalances(value: Array<string>) {
    this.set("userBalances", Value.fromStringArray(value));
  }
}

export class UserBalance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("user", Value.fromString(""));
    this.set("oceanId", Value.fromString(""));
    this.set("balance", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UserBalance entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type UserBalance must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UserBalance", id.toString(), this);
    }
  }

  static load(id: string): UserBalance | null {
    return changetype<UserBalance | null>(store.get("UserBalance", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value!.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get oceanId(): string {
    let value = this.get("oceanId");
    return value!.toString();
  }

  set oceanId(value: string) {
    this.set("oceanId", Value.fromString(value));
  }

  get balance(): BigInt {
    let value = this.get("balance");
    return value!.toBigInt();
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }
}

export class UnwrapFee extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("currentFee", Value.fromString(""));
    this.set("previousFees", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UnwrapFee entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type UnwrapFee must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UnwrapFee", id.toString(), this);
    }
  }

  static load(id: string): UnwrapFee | null {
    return changetype<UnwrapFee | null>(store.get("UnwrapFee", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get currentFee(): string {
    let value = this.get("currentFee");
    return value!.toString();
  }

  set currentFee(value: string) {
    this.set("currentFee", Value.fromString(value));
  }

  get previousFees(): Array<string> {
    let value = this.get("previousFees");
    return value!.toStringArray();
  }

  set previousFees(value: Array<string>) {
    this.set("previousFees", Value.fromStringArray(value));
  }
}

export class Fee extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("feeAmount", Value.fromBigInt(BigInt.zero()));
    this.set("owner", Value.fromString(""));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("block", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Fee entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Fee must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Fee", id.toString(), this);
    }
  }

  static load(id: string): Fee | null {
    return changetype<Fee | null>(store.get("Fee", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get feeAmount(): BigInt {
    let value = this.get("feeAmount");
    return value!.toBigInt();
  }

  set feeAmount(value: BigInt) {
    this.set("feeAmount", Value.fromBigInt(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value!.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }
}

export class Primitive extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("users", Value.fromStringArray(new Array(0)));
    this.set("registeredTokens", Value.fromStringArray(new Array(0)));
    this.set("createdTimestamp", Value.fromBigInt(BigInt.zero()));
    this.set("recognized", Value.fromBoolean(false));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Primitive entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Primitive must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Primitive", id.toString(), this);
    }
  }

  static load(id: string): Primitive | null {
    return changetype<Primitive | null>(store.get("Primitive", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get users(): Array<string> {
    let value = this.get("users");
    return value!.toStringArray();
  }

  set users(value: Array<string>) {
    this.set("users", Value.fromStringArray(value));
  }

  get registeredTokens(): Array<string> {
    let value = this.get("registeredTokens");
    return value!.toStringArray();
  }

  set registeredTokens(value: Array<string>) {
    this.set("registeredTokens", Value.fromStringArray(value));
  }

  get createdTimestamp(): BigInt {
    let value = this.get("createdTimestamp");
    return value!.toBigInt();
  }

  set createdTimestamp(value: BigInt) {
    this.set("createdTimestamp", Value.fromBigInt(value));
  }

  get recognized(): boolean {
    let value = this.get("recognized");
    return value!.toBoolean();
  }

  set recognized(value: boolean) {
    this.set("recognized", Value.fromBoolean(value));
  }
}

export class TokenRegistry extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("creator", Value.fromString(""));
    this.set("tokens", Value.fromStringArray(new Array(0)));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("block", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TokenRegistry entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TokenRegistry must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TokenRegistry", id.toString(), this);
    }
  }

  static load(id: string): TokenRegistry | null {
    return changetype<TokenRegistry | null>(store.get("TokenRegistry", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get creator(): string {
    let value = this.get("creator");
    return value!.toString();
  }

  set creator(value: string) {
    this.set("creator", Value.fromString(value));
  }

  get tokens(): Array<string> {
    let value = this.get("tokens");
    return value!.toStringArray();
  }

  set tokens(value: Array<string>) {
    this.set("tokens", Value.fromStringArray(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value!.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }
}

export class RegisteredToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("supply", Value.fromBigInt(BigInt.zero()));
    this.set("issuer", Value.fromString(""));
    this.set("createdTimestamp", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RegisteredToken entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RegisteredToken must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RegisteredToken", id.toString(), this);
    }
  }

  static load(id: string): RegisteredToken | null {
    return changetype<RegisteredToken | null>(store.get("RegisteredToken", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get supply(): BigInt {
    let value = this.get("supply");
    return value!.toBigInt();
  }

  set supply(value: BigInt) {
    this.set("supply", Value.fromBigInt(value));
  }

  get issuer(): string {
    let value = this.get("issuer");
    return value!.toString();
  }

  set issuer(value: string) {
    this.set("issuer", Value.fromString(value));
  }

  get createdTimestamp(): BigInt {
    let value = this.get("createdTimestamp");
    return value!.toBigInt();
  }

  set createdTimestamp(value: BigInt) {
    this.set("createdTimestamp", Value.fromBigInt(value));
  }
}

export class ERC20ExternalContract extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("decimals", Value.fromBigInt(BigInt.zero()));
    this.set("name", Value.fromString(""));
    this.set("symbol", Value.fromString(""));
    this.set("wrappedAmount", Value.fromBigInt(BigInt.zero()));
    this.set("cumulativeFees", Value.fromBigInt(BigInt.zero()));
    this.set("recognized", Value.fromBoolean(false));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ERC20ExternalContract entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ERC20ExternalContract must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ERC20ExternalContract", id.toString(), this);
    }
  }

  static load(id: string): ERC20ExternalContract | null {
    return changetype<ERC20ExternalContract | null>(
      store.get("ERC20ExternalContract", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get decimals(): BigInt {
    let value = this.get("decimals");
    return value!.toBigInt();
  }

  set decimals(value: BigInt) {
    this.set("decimals", Value.fromBigInt(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value!.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get wrappedAmount(): BigInt {
    let value = this.get("wrappedAmount");
    return value!.toBigInt();
  }

  set wrappedAmount(value: BigInt) {
    this.set("wrappedAmount", Value.fromBigInt(value));
  }

  get cumulativeFees(): BigInt {
    let value = this.get("cumulativeFees");
    return value!.toBigInt();
  }

  set cumulativeFees(value: BigInt) {
    this.set("cumulativeFees", Value.fromBigInt(value));
  }

  get recognized(): boolean {
    let value = this.get("recognized");
    return value!.toBoolean();
  }

  set recognized(value: boolean) {
    this.set("recognized", Value.fromBoolean(value));
  }
}

export class ERC721ExternalContract extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("tokenIds", Value.fromStringArray(new Array(0)));
    this.set("recognized", Value.fromBoolean(false));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ERC721ExternalContract entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ERC721ExternalContract must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ERC721ExternalContract", id.toString(), this);
    }
  }

  static load(id: string): ERC721ExternalContract | null {
    return changetype<ERC721ExternalContract | null>(
      store.get("ERC721ExternalContract", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenIds(): Array<string> {
    let value = this.get("tokenIds");
    return value!.toStringArray();
  }

  set tokenIds(value: Array<string>) {
    this.set("tokenIds", Value.fromStringArray(value));
  }

  get recognized(): boolean {
    let value = this.get("recognized");
    return value!.toBoolean();
  }

  set recognized(value: boolean) {
    this.set("recognized", Value.fromBoolean(value));
  }
}

export class ERC721Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("wrappedOceanSupply", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ERC721Token entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ERC721Token must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ERC721Token", id.toString(), this);
    }
  }

  static load(id: string): ERC721Token | null {
    return changetype<ERC721Token | null>(store.get("ERC721Token", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get wrappedOceanSupply(): BigInt {
    let value = this.get("wrappedOceanSupply");
    return value!.toBigInt();
  }

  set wrappedOceanSupply(value: BigInt) {
    this.set("wrappedOceanSupply", Value.fromBigInt(value));
  }
}

export class ERC1155ExternalContract extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("tokenIds", Value.fromStringArray(new Array(0)));
    this.set("recognized", Value.fromBoolean(false));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ERC1155ExternalContract entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ERC1155ExternalContract must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ERC1155ExternalContract", id.toString(), this);
    }
  }

  static load(id: string): ERC1155ExternalContract | null {
    return changetype<ERC1155ExternalContract | null>(
      store.get("ERC1155ExternalContract", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenIds(): Array<string> {
    let value = this.get("tokenIds");
    return value!.toStringArray();
  }

  set tokenIds(value: Array<string>) {
    this.set("tokenIds", Value.fromStringArray(value));
  }

  get recognized(): boolean {
    let value = this.get("recognized");
    return value!.toBoolean();
  }

  set recognized(value: boolean) {
    this.set("recognized", Value.fromBoolean(value));
  }
}

export class ERC1155Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("wrappedOceanSupply", Value.fromBigInt(BigInt.zero()));
    this.set("cumulativeFees", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ERC1155Token entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ERC1155Token must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ERC1155Token", id.toString(), this);
    }
  }

  static load(id: string): ERC1155Token | null {
    return changetype<ERC1155Token | null>(store.get("ERC1155Token", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get wrappedOceanSupply(): BigInt {
    let value = this.get("wrappedOceanSupply");
    return value!.toBigInt();
  }

  set wrappedOceanSupply(value: BigInt) {
    this.set("wrappedOceanSupply", Value.fromBigInt(value));
  }

  get cumulativeFees(): BigInt {
    let value = this.get("cumulativeFees");
    return value!.toBigInt();
  }

  set cumulativeFees(value: BigInt) {
    this.set("cumulativeFees", Value.fromBigInt(value));
  }
}

export class OceanTransaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("mints", Value.fromStringArray(new Array(0)));
    this.set("burns", Value.fromStringArray(new Array(0)));
    this.set("interactions", Value.fromStringArray(new Array(0)));
    this.set("user", Value.fromString(""));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("block", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save OceanTransaction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type OceanTransaction must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("OceanTransaction", id.toString(), this);
    }
  }

  static load(id: string): OceanTransaction | null {
    return changetype<OceanTransaction | null>(
      store.get("OceanTransaction", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get mints(): Array<string> {
    let value = this.get("mints");
    return value!.toStringArray();
  }

  set mints(value: Array<string>) {
    this.set("mints", Value.fromStringArray(value));
  }

  get burns(): Array<string> {
    let value = this.get("burns");
    return value!.toStringArray();
  }

  set burns(value: Array<string>) {
    this.set("burns", Value.fromStringArray(value));
  }

  get interactions(): Array<string> {
    let value = this.get("interactions");
    return value!.toStringArray();
  }

  set interactions(value: Array<string>) {
    this.set("interactions", Value.fromStringArray(value));
  }

  get user(): string {
    let value = this.get("user");
    return value!.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value!.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }
}

export class ERC20Wrap extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("externalContract", Value.fromString(""));
    this.set("wrappedTokenId", Value.fromString(""));
    this.set("transferredAmount", Value.fromBigInt(BigInt.zero()));
    this.set("wrappedAmount", Value.fromBigInt(BigInt.zero()));
    this.set("dust", Value.fromBigInt(BigInt.zero()));
    this.set("user", Value.fromString(""));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("block", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ERC20Wrap entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ERC20Wrap must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ERC20Wrap", id.toString(), this);
    }
  }

  static load(id: string): ERC20Wrap | null {
    return changetype<ERC20Wrap | null>(store.get("ERC20Wrap", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get externalContract(): string {
    let value = this.get("externalContract");
    return value!.toString();
  }

  set externalContract(value: string) {
    this.set("externalContract", Value.fromString(value));
  }

  get wrappedTokenId(): string {
    let value = this.get("wrappedTokenId");
    return value!.toString();
  }

  set wrappedTokenId(value: string) {
    this.set("wrappedTokenId", Value.fromString(value));
  }

  get transferredAmount(): BigInt {
    let value = this.get("transferredAmount");
    return value!.toBigInt();
  }

  set transferredAmount(value: BigInt) {
    this.set("transferredAmount", Value.fromBigInt(value));
  }

  get wrappedAmount(): BigInt {
    let value = this.get("wrappedAmount");
    return value!.toBigInt();
  }

  set wrappedAmount(value: BigInt) {
    this.set("wrappedAmount", Value.fromBigInt(value));
  }

  get dust(): BigInt {
    let value = this.get("dust");
    return value!.toBigInt();
  }

  set dust(value: BigInt) {
    this.set("dust", Value.fromBigInt(value));
  }

  get user(): string {
    let value = this.get("user");
    return value!.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value!.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }
}

export class ERC20Unwrap extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("externalContract", Value.fromString(""));
    this.set("wrappedTokenId", Value.fromString(""));
    this.set("transferredAmount", Value.fromBigInt(BigInt.zero()));
    this.set("unwrappedAmount", Value.fromBigInt(BigInt.zero()));
    this.set("feeCharged", Value.fromBigInt(BigInt.zero()));
    this.set("user", Value.fromString(""));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("block", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ERC20Unwrap entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ERC20Unwrap must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ERC20Unwrap", id.toString(), this);
    }
  }

  static load(id: string): ERC20Unwrap | null {
    return changetype<ERC20Unwrap | null>(store.get("ERC20Unwrap", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get externalContract(): string {
    let value = this.get("externalContract");
    return value!.toString();
  }

  set externalContract(value: string) {
    this.set("externalContract", Value.fromString(value));
  }

  get wrappedTokenId(): string {
    let value = this.get("wrappedTokenId");
    return value!.toString();
  }

  set wrappedTokenId(value: string) {
    this.set("wrappedTokenId", Value.fromString(value));
  }

  get transferredAmount(): BigInt {
    let value = this.get("transferredAmount");
    return value!.toBigInt();
  }

  set transferredAmount(value: BigInt) {
    this.set("transferredAmount", Value.fromBigInt(value));
  }

  get unwrappedAmount(): BigInt {
    let value = this.get("unwrappedAmount");
    return value!.toBigInt();
  }

  set unwrappedAmount(value: BigInt) {
    this.set("unwrappedAmount", Value.fromBigInt(value));
  }

  get feeCharged(): BigInt {
    let value = this.get("feeCharged");
    return value!.toBigInt();
  }

  set feeCharged(value: BigInt) {
    this.set("feeCharged", Value.fromBigInt(value));
  }

  get user(): string {
    let value = this.get("user");
    return value!.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value!.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }
}

export class ERC721Wrap extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("externalContract", Value.fromString(""));
    this.set("wrappedTokenId", Value.fromString(""));
    this.set("user", Value.fromString(""));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("block", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ERC721Wrap entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ERC721Wrap must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ERC721Wrap", id.toString(), this);
    }
  }

  static load(id: string): ERC721Wrap | null {
    return changetype<ERC721Wrap | null>(store.get("ERC721Wrap", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get externalContract(): string {
    let value = this.get("externalContract");
    return value!.toString();
  }

  set externalContract(value: string) {
    this.set("externalContract", Value.fromString(value));
  }

  get wrappedTokenId(): string {
    let value = this.get("wrappedTokenId");
    return value!.toString();
  }

  set wrappedTokenId(value: string) {
    this.set("wrappedTokenId", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value!.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value!.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }
}

export class ERC721Unwrap extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("externalContract", Value.fromString(""));
    this.set("wrappedTokenId", Value.fromString(""));
    this.set("user", Value.fromString(""));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("block", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ERC721Unwrap entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ERC721Unwrap must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ERC721Unwrap", id.toString(), this);
    }
  }

  static load(id: string): ERC721Unwrap | null {
    return changetype<ERC721Unwrap | null>(store.get("ERC721Unwrap", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get externalContract(): string {
    let value = this.get("externalContract");
    return value!.toString();
  }

  set externalContract(value: string) {
    this.set("externalContract", Value.fromString(value));
  }

  get wrappedTokenId(): string {
    let value = this.get("wrappedTokenId");
    return value!.toString();
  }

  set wrappedTokenId(value: string) {
    this.set("wrappedTokenId", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value!.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value!.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }
}

export class ERC1155Wrap extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("externalContract", Value.fromString(""));
    this.set("wrappedTokenId", Value.fromString(""));
    this.set("wrappedAmount", Value.fromBigInt(BigInt.zero()));
    this.set("user", Value.fromString(""));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("block", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ERC1155Wrap entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ERC1155Wrap must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ERC1155Wrap", id.toString(), this);
    }
  }

  static load(id: string): ERC1155Wrap | null {
    return changetype<ERC1155Wrap | null>(store.get("ERC1155Wrap", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get externalContract(): string {
    let value = this.get("externalContract");
    return value!.toString();
  }

  set externalContract(value: string) {
    this.set("externalContract", Value.fromString(value));
  }

  get wrappedTokenId(): string {
    let value = this.get("wrappedTokenId");
    return value!.toString();
  }

  set wrappedTokenId(value: string) {
    this.set("wrappedTokenId", Value.fromString(value));
  }

  get wrappedAmount(): BigInt {
    let value = this.get("wrappedAmount");
    return value!.toBigInt();
  }

  set wrappedAmount(value: BigInt) {
    this.set("wrappedAmount", Value.fromBigInt(value));
  }

  get user(): string {
    let value = this.get("user");
    return value!.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value!.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }
}

export class ERC1155Unwrap extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("externalContract", Value.fromString(""));
    this.set("wrappedTokenId", Value.fromString(""));
    this.set("unwrappedAmount", Value.fromBigInt(BigInt.zero()));
    this.set("feeCharged", Value.fromBigInt(BigInt.zero()));
    this.set("user", Value.fromString(""));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("block", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ERC1155Unwrap entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ERC1155Unwrap must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ERC1155Unwrap", id.toString(), this);
    }
  }

  static load(id: string): ERC1155Unwrap | null {
    return changetype<ERC1155Unwrap | null>(store.get("ERC1155Unwrap", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get externalContract(): string {
    let value = this.get("externalContract");
    return value!.toString();
  }

  set externalContract(value: string) {
    this.set("externalContract", Value.fromString(value));
  }

  get wrappedTokenId(): string {
    let value = this.get("wrappedTokenId");
    return value!.toString();
  }

  set wrappedTokenId(value: string) {
    this.set("wrappedTokenId", Value.fromString(value));
  }

  get unwrappedAmount(): BigInt {
    let value = this.get("unwrappedAmount");
    return value!.toBigInt();
  }

  set unwrappedAmount(value: BigInt) {
    this.set("unwrappedAmount", Value.fromBigInt(value));
  }

  get feeCharged(): BigInt {
    let value = this.get("feeCharged");
    return value!.toBigInt();
  }

  set feeCharged(value: BigInt) {
    this.set("feeCharged", Value.fromBigInt(value));
  }

  get user(): string {
    let value = this.get("user");
    return value!.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value!.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }
}

export class ComputeInputAmount extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("externalContract", Value.fromString(""));
    this.set("inputToken", Value.fromString(""));
    this.set("inputAmount", Value.fromBigInt(BigInt.zero()));
    this.set("outputToken", Value.fromString(""));
    this.set("outputAmount", Value.fromBigInt(BigInt.zero()));
    this.set("user", Value.fromString(""));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("block", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ComputeInputAmount entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ComputeInputAmount must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ComputeInputAmount", id.toString(), this);
    }
  }

  static load(id: string): ComputeInputAmount | null {
    return changetype<ComputeInputAmount | null>(
      store.get("ComputeInputAmount", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get externalContract(): string {
    let value = this.get("externalContract");
    return value!.toString();
  }

  set externalContract(value: string) {
    this.set("externalContract", Value.fromString(value));
  }

  get inputToken(): string {
    let value = this.get("inputToken");
    return value!.toString();
  }

  set inputToken(value: string) {
    this.set("inputToken", Value.fromString(value));
  }

  get inputAmount(): BigInt {
    let value = this.get("inputAmount");
    return value!.toBigInt();
  }

  set inputAmount(value: BigInt) {
    this.set("inputAmount", Value.fromBigInt(value));
  }

  get outputToken(): string {
    let value = this.get("outputToken");
    return value!.toString();
  }

  set outputToken(value: string) {
    this.set("outputToken", Value.fromString(value));
  }

  get outputAmount(): BigInt {
    let value = this.get("outputAmount");
    return value!.toBigInt();
  }

  set outputAmount(value: BigInt) {
    this.set("outputAmount", Value.fromBigInt(value));
  }

  get user(): string {
    let value = this.get("user");
    return value!.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value!.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }
}

export class ComputeOutputAmount extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("externalContract", Value.fromString(""));
    this.set("inputToken", Value.fromString(""));
    this.set("inputAmount", Value.fromBigInt(BigInt.zero()));
    this.set("outputToken", Value.fromString(""));
    this.set("outputAmount", Value.fromBigInt(BigInt.zero()));
    this.set("user", Value.fromString(""));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("block", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ComputeOutputAmount entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ComputeOutputAmount must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ComputeOutputAmount", id.toString(), this);
    }
  }

  static load(id: string): ComputeOutputAmount | null {
    return changetype<ComputeOutputAmount | null>(
      store.get("ComputeOutputAmount", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get externalContract(): string {
    let value = this.get("externalContract");
    return value!.toString();
  }

  set externalContract(value: string) {
    this.set("externalContract", Value.fromString(value));
  }

  get inputToken(): string {
    let value = this.get("inputToken");
    return value!.toString();
  }

  set inputToken(value: string) {
    this.set("inputToken", Value.fromString(value));
  }

  get inputAmount(): BigInt {
    let value = this.get("inputAmount");
    return value!.toBigInt();
  }

  set inputAmount(value: BigInt) {
    this.set("inputAmount", Value.fromBigInt(value));
  }

  get outputToken(): string {
    let value = this.get("outputToken");
    return value!.toString();
  }

  set outputToken(value: string) {
    this.set("outputToken", Value.fromString(value));
  }

  get outputAmount(): BigInt {
    let value = this.get("outputAmount");
    return value!.toBigInt();
  }

  set outputAmount(value: BigInt) {
    this.set("outputAmount", Value.fromBigInt(value));
  }

  get user(): string {
    let value = this.get("user");
    return value!.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value!.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }
}

export class ForwarderTransaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("forwarder", Value.fromString(""));
    this.set("oceanTransaction", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ForwarderTransaction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ForwarderTransaction must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ForwarderTransaction", id.toString(), this);
    }
  }

  static load(id: string): ForwarderTransaction | null {
    return changetype<ForwarderTransaction | null>(
      store.get("ForwarderTransaction", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get forwarder(): string {
    let value = this.get("forwarder");
    return value!.toString();
  }

  set forwarder(value: string) {
    this.set("forwarder", Value.fromString(value));
  }

  get oceanTransaction(): string {
    let value = this.get("oceanTransaction");
    return value!.toString();
  }

  set oceanTransaction(value: string) {
    this.set("oceanTransaction", Value.fromString(value));
  }
}

export class Mint extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("to", Value.fromString(""));
    this.set("from", Value.fromString(""));
    this.set("oceanToken", Value.fromString(""));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Mint entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Mint must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Mint", id.toString(), this);
    }
  }

  static load(id: string): Mint | null {
    return changetype<Mint | null>(store.get("Mint", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get to(): string {
    let value = this.get("to");
    return value!.toString();
  }

  set to(value: string) {
    this.set("to", Value.fromString(value));
  }

  get from(): string {
    let value = this.get("from");
    return value!.toString();
  }

  set from(value: string) {
    this.set("from", Value.fromString(value));
  }

  get oceanToken(): string {
    let value = this.get("oceanToken");
    return value!.toString();
  }

  set oceanToken(value: string) {
    this.set("oceanToken", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class Burn extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("to", Value.fromString(""));
    this.set("from", Value.fromString(""));
    this.set("oceanToken", Value.fromString(""));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Burn entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Burn must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Burn", id.toString(), this);
    }
  }

  static load(id: string): Burn | null {
    return changetype<Burn | null>(store.get("Burn", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get to(): string {
    let value = this.get("to");
    return value!.toString();
  }

  set to(value: string) {
    this.set("to", Value.fromString(value));
  }

  get from(): string {
    let value = this.get("from");
    return value!.toString();
  }

  set from(value: string) {
    this.set("from", Value.fromString(value));
  }

  get oceanToken(): string {
    let value = this.get("oceanToken");
    return value!.toString();
  }

  set oceanToken(value: string) {
    this.set("oceanToken", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class UserTransfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("from", Value.fromString(""));
    this.set("to", Value.fromString(""));
    this.set("oceanToken", Value.fromString(""));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("block", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UserTransfer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type UserTransfer must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UserTransfer", id.toString(), this);
    }
  }

  static load(id: string): UserTransfer | null {
    return changetype<UserTransfer | null>(store.get("UserTransfer", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get from(): string {
    let value = this.get("from");
    return value!.toString();
  }

  set from(value: string) {
    this.set("from", Value.fromString(value));
  }

  get to(): string {
    let value = this.get("to");
    return value!.toString();
  }

  set to(value: string) {
    this.set("to", Value.fromString(value));
  }

  get oceanToken(): string {
    let value = this.get("oceanToken");
    return value!.toString();
  }

  set oceanToken(value: string) {
    this.set("oceanToken", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value!.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }
}

export class OceanToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("sourceContract", Value.fromString(""));
    this.set("contractType", Value.fromString(""));
    this.set("supply", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save OceanToken entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type OceanToken must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("OceanToken", id.toString(), this);
    }
  }

  static load(id: string): OceanToken | null {
    return changetype<OceanToken | null>(store.get("OceanToken", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get sourceContract(): string {
    let value = this.get("sourceContract");
    return value!.toString();
  }

  set sourceContract(value: string) {
    this.set("sourceContract", Value.fromString(value));
  }

  get contractType(): string {
    let value = this.get("contractType");
    return value!.toString();
  }

  set contractType(value: string) {
    this.set("contractType", Value.fromString(value));
  }

  get contractNonce(): BigInt | null {
    let value = this.get("contractNonce");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set contractNonce(value: BigInt | null) {
    if (!value) {
      this.unset("contractNonce");
    } else {
      this.set("contractNonce", Value.fromBigInt(<BigInt>value));
    }
  }

  get supply(): BigInt {
    let value = this.get("supply");
    return value!.toBigInt();
  }

  set supply(value: BigInt) {
    this.set("supply", Value.fromBigInt(value));
  }
}

export class Warning extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("type", Value.fromString(""));
    this.set("description", Value.fromString(""));
    this.set("event", Value.fromString(""));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Warning entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Warning must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Warning", id.toString(), this);
    }
  }

  static load(id: string): Warning | null {
    return changetype<Warning | null>(store.get("Warning", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get description(): string {
    let value = this.get("description");
    return value!.toString();
  }

  set description(value: string) {
    this.set("description", Value.fromString(value));
  }

  get event(): string {
    let value = this.get("event");
    return value!.toString();
  }

  set event(value: string) {
    this.set("event", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}
