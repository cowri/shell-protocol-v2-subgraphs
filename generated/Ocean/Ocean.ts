// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class ChangeUnwrapFee extends ethereum.Event {
  get params(): ChangeUnwrapFee__Params {
    return new ChangeUnwrapFee__Params(this);
  }
}

export class ChangeUnwrapFee__Params {
  _event: ChangeUnwrapFee;

  constructor(event: ChangeUnwrapFee) {
    this._event = event;
  }

  get oldFee(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newFee(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class ComputeInputAmount extends ethereum.Event {
  get params(): ComputeInputAmount__Params {
    return new ComputeInputAmount__Params(this);
  }
}

export class ComputeInputAmount__Params {
  _event: ComputeInputAmount;

  constructor(event: ComputeInputAmount) {
    this._event = event;
  }

  get primitive(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get inputToken(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get outputToken(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get inputAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get outputAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[5].value.toAddress();
  }
}

export class ComputeOutputAmount extends ethereum.Event {
  get params(): ComputeOutputAmount__Params {
    return new ComputeOutputAmount__Params(this);
  }
}

export class ComputeOutputAmount__Params {
  _event: ComputeOutputAmount;

  constructor(event: ComputeOutputAmount) {
    this._event = event;
  }

  get primitive(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get inputToken(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get outputToken(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get inputAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get outputAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[5].value.toAddress();
  }
}

export class Erc1155Unwrap extends ethereum.Event {
  get params(): Erc1155Unwrap__Params {
    return new Erc1155Unwrap__Params(this);
  }
}

export class Erc1155Unwrap__Params {
  _event: Erc1155Unwrap;

  constructor(event: Erc1155Unwrap) {
    this._event = event;
  }

  get erc1155Token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get erc1155Id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get feeCharged(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get oceanId(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class Erc1155Wrap extends ethereum.Event {
  get params(): Erc1155Wrap__Params {
    return new Erc1155Wrap__Params(this);
  }
}

export class Erc1155Wrap__Params {
  _event: Erc1155Wrap;

  constructor(event: Erc1155Wrap) {
    this._event = event;
  }

  get erc1155Token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get erc1155Id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get oceanId(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Erc20Unwrap extends ethereum.Event {
  get params(): Erc20Unwrap__Params {
    return new Erc20Unwrap__Params(this);
  }
}

export class Erc20Unwrap__Params {
  _event: Erc20Unwrap;

  constructor(event: Erc20Unwrap) {
    this._event = event;
  }

  get erc20Token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get transferredAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get unwrappedAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get feeCharged(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get oceanId(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class Erc20Wrap extends ethereum.Event {
  get params(): Erc20Wrap__Params {
    return new Erc20Wrap__Params(this);
  }
}

export class Erc20Wrap__Params {
  _event: Erc20Wrap;

  constructor(event: Erc20Wrap) {
    this._event = event;
  }

  get erc20Token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get transferredAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get wrappedAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get dust(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get oceanId(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class Erc721Unwrap extends ethereum.Event {
  get params(): Erc721Unwrap__Params {
    return new Erc721Unwrap__Params(this);
  }
}

export class Erc721Unwrap__Params {
  _event: Erc721Unwrap;

  constructor(event: Erc721Unwrap) {
    this._event = event;
  }

  get erc721Token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get erc721Id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get oceanId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Erc721Wrap extends ethereum.Event {
  get params(): Erc721Wrap__Params {
    return new Erc721Wrap__Params(this);
  }
}

export class Erc721Wrap__Params {
  _event: Erc721Wrap;

  constructor(event: Erc721Wrap) {
    this._event = event;
  }

  get erc721Token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get erc721id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get oceanId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ForwardedOceanTransaction extends ethereum.Event {
  get params(): ForwardedOceanTransaction__Params {
    return new ForwardedOceanTransaction__Params(this);
  }
}

export class ForwardedOceanTransaction__Params {
  _event: ForwardedOceanTransaction;

  constructor(event: ForwardedOceanTransaction) {
    this._event = event;
  }

  get forwarder(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get numberOfInteractions(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class NewTokensRegistered extends ethereum.Event {
  get params(): NewTokensRegistered__Params {
    return new NewTokensRegistered__Params(this);
  }
}

export class NewTokensRegistered__Params {
  _event: NewTokensRegistered;

  constructor(event: NewTokensRegistered) {
    this._event = event;
  }

  get creator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokens(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }

  get nonces(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }
}

export class OceanTransaction extends ethereum.Event {
  get params(): OceanTransaction__Params {
    return new OceanTransaction__Params(this);
  }
}

export class OceanTransaction__Params {
  _event: OceanTransaction;

  constructor(event: OceanTransaction) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get numberOfInteractions(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TransferBatch extends ethereum.Event {
  get params(): TransferBatch__Params {
    return new TransferBatch__Params(this);
  }
}

export class TransferBatch__Params {
  _event: TransferBatch;

  constructor(event: TransferBatch) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get values(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }
}

export class TransferSingle extends ethereum.Event {
  get params(): TransferSingle__Params {
    return new TransferSingle__Params(this);
  }
}

export class TransferSingle__Params {
  _event: TransferSingle;

  constructor(event: TransferSingle) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class URI extends ethereum.Event {
  get params(): URI__Params {
    return new URI__Params(this);
  }
}

export class URI__Params {
  _event: URI;

  constructor(event: URI) {
    this._event = event;
  }

  get value(): string {
    return this._event.parameters[0].value.toString();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Ocean extends ethereum.SmartContract {
  static bind(address: Address): Ocean {
    return new Ocean("Ocean", address);
  }

  balanceOf(account: Address, id: BigInt): BigInt {
    let result = super.call(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address, id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfBatch(accounts: Array<Address>, ids: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_balanceOfBatch(
    accounts: Array<Address>,
    ids: Array<BigInt>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  isApprovedForAll(account: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(operator)
      ]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    account: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(operator)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  registerNewTokens(
    currentNumberOfTokens: BigInt,
    numberOfAdditionalTokens: BigInt
  ): Array<BigInt> {
    let result = super.call(
      "registerNewTokens",
      "registerNewTokens(uint256,uint256):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(currentNumberOfTokens),
        ethereum.Value.fromUnsignedBigInt(numberOfAdditionalTokens)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_registerNewTokens(
    currentNumberOfTokens: BigInt,
    numberOfAdditionalTokens: BigInt
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "registerNewTokens",
      "registerNewTokens(uint256,uint256):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(currentNumberOfTokens),
        ethereum.Value.fromUnsignedBigInt(numberOfAdditionalTokens)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  tokensToPrimitives(param0: BigInt): Address {
    let result = super.call(
      "tokensToPrimitives",
      "tokensToPrimitives(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_tokensToPrimitives(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "tokensToPrimitives",
      "tokensToPrimitives(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  unwrapFeeDivisor(): BigInt {
    let result = super.call(
      "unwrapFeeDivisor",
      "unwrapFeeDivisor():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_unwrapFeeDivisor(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "unwrapFeeDivisor",
      "unwrapFeeDivisor():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  uri(param0: BigInt): string {
    let result = super.call("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toString();
  }

  try_uri(param0: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get uri_(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ChangeUnwrapFeeCall extends ethereum.Call {
  get inputs(): ChangeUnwrapFeeCall__Inputs {
    return new ChangeUnwrapFeeCall__Inputs(this);
  }

  get outputs(): ChangeUnwrapFeeCall__Outputs {
    return new ChangeUnwrapFeeCall__Outputs(this);
  }
}

export class ChangeUnwrapFeeCall__Inputs {
  _call: ChangeUnwrapFeeCall;

  constructor(call: ChangeUnwrapFeeCall) {
    this._call = call;
  }

  get nextUnwrapFeeDivisor(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ChangeUnwrapFeeCall__Outputs {
  _call: ChangeUnwrapFeeCall;

  constructor(call: ChangeUnwrapFeeCall) {
    this._call = call;
  }
}

export class DoInteractionCall extends ethereum.Call {
  get inputs(): DoInteractionCall__Inputs {
    return new DoInteractionCall__Inputs(this);
  }

  get outputs(): DoInteractionCall__Outputs {
    return new DoInteractionCall__Outputs(this);
  }
}

export class DoInteractionCall__Inputs {
  _call: DoInteractionCall;

  constructor(call: DoInteractionCall) {
    this._call = call;
  }

  get interaction(): DoInteractionCallInteractionStruct {
    return changetype<DoInteractionCallInteractionStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class DoInteractionCall__Outputs {
  _call: DoInteractionCall;

  constructor(call: DoInteractionCall) {
    this._call = call;
  }
}

export class DoInteractionCallInteractionStruct extends ethereum.Tuple {
  get interactionTypeAndAddress(): Bytes {
    return this[0].toBytes();
  }

  get inputToken(): BigInt {
    return this[1].toBigInt();
  }

  get outputToken(): BigInt {
    return this[2].toBigInt();
  }

  get specifiedAmount(): BigInt {
    return this[3].toBigInt();
  }

  get metadata(): Bytes {
    return this[4].toBytes();
  }
}

export class DoMultipleInteractionsCall extends ethereum.Call {
  get inputs(): DoMultipleInteractionsCall__Inputs {
    return new DoMultipleInteractionsCall__Inputs(this);
  }

  get outputs(): DoMultipleInteractionsCall__Outputs {
    return new DoMultipleInteractionsCall__Outputs(this);
  }
}

export class DoMultipleInteractionsCall__Inputs {
  _call: DoMultipleInteractionsCall;

  constructor(call: DoMultipleInteractionsCall) {
    this._call = call;
  }

  get interactions(): Array<DoMultipleInteractionsCallInteractionsStruct> {
    return this._call.inputValues[0].value.toTupleArray<
      DoMultipleInteractionsCallInteractionsStruct
    >();
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class DoMultipleInteractionsCall__Outputs {
  _call: DoMultipleInteractionsCall;

  constructor(call: DoMultipleInteractionsCall) {
    this._call = call;
  }
}

export class DoMultipleInteractionsCallInteractionsStruct extends ethereum.Tuple {
  get interactionTypeAndAddress(): Bytes {
    return this[0].toBytes();
  }

  get inputToken(): BigInt {
    return this[1].toBigInt();
  }

  get outputToken(): BigInt {
    return this[2].toBigInt();
  }

  get specifiedAmount(): BigInt {
    return this[3].toBigInt();
  }

  get metadata(): Bytes {
    return this[4].toBytes();
  }
}

export class ForwardedDoInteractionCall extends ethereum.Call {
  get inputs(): ForwardedDoInteractionCall__Inputs {
    return new ForwardedDoInteractionCall__Inputs(this);
  }

  get outputs(): ForwardedDoInteractionCall__Outputs {
    return new ForwardedDoInteractionCall__Outputs(this);
  }
}

export class ForwardedDoInteractionCall__Inputs {
  _call: ForwardedDoInteractionCall;

  constructor(call: ForwardedDoInteractionCall) {
    this._call = call;
  }

  get interaction(): ForwardedDoInteractionCallInteractionStruct {
    return changetype<ForwardedDoInteractionCallInteractionStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get userAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ForwardedDoInteractionCall__Outputs {
  _call: ForwardedDoInteractionCall;

  constructor(call: ForwardedDoInteractionCall) {
    this._call = call;
  }
}

export class ForwardedDoInteractionCallInteractionStruct extends ethereum.Tuple {
  get interactionTypeAndAddress(): Bytes {
    return this[0].toBytes();
  }

  get inputToken(): BigInt {
    return this[1].toBigInt();
  }

  get outputToken(): BigInt {
    return this[2].toBigInt();
  }

  get specifiedAmount(): BigInt {
    return this[3].toBigInt();
  }

  get metadata(): Bytes {
    return this[4].toBytes();
  }
}

export class ForwardedDoMultipleInteractionsCall extends ethereum.Call {
  get inputs(): ForwardedDoMultipleInteractionsCall__Inputs {
    return new ForwardedDoMultipleInteractionsCall__Inputs(this);
  }

  get outputs(): ForwardedDoMultipleInteractionsCall__Outputs {
    return new ForwardedDoMultipleInteractionsCall__Outputs(this);
  }
}

export class ForwardedDoMultipleInteractionsCall__Inputs {
  _call: ForwardedDoMultipleInteractionsCall;

  constructor(call: ForwardedDoMultipleInteractionsCall) {
    this._call = call;
  }

  get interactions(): Array<
    ForwardedDoMultipleInteractionsCallInteractionsStruct
  > {
    return this._call.inputValues[0].value.toTupleArray<
      ForwardedDoMultipleInteractionsCallInteractionsStruct
    >();
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get userAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ForwardedDoMultipleInteractionsCall__Outputs {
  _call: ForwardedDoMultipleInteractionsCall;

  constructor(call: ForwardedDoMultipleInteractionsCall) {
    this._call = call;
  }
}

export class ForwardedDoMultipleInteractionsCallInteractionsStruct extends ethereum.Tuple {
  get interactionTypeAndAddress(): Bytes {
    return this[0].toBytes();
  }

  get inputToken(): BigInt {
    return this[1].toBigInt();
  }

  get outputToken(): BigInt {
    return this[2].toBigInt();
  }

  get specifiedAmount(): BigInt {
    return this[3].toBigInt();
  }

  get metadata(): Bytes {
    return this[4].toBytes();
  }
}

export class RegisterNewTokensCall extends ethereum.Call {
  get inputs(): RegisterNewTokensCall__Inputs {
    return new RegisterNewTokensCall__Inputs(this);
  }

  get outputs(): RegisterNewTokensCall__Outputs {
    return new RegisterNewTokensCall__Outputs(this);
  }
}

export class RegisterNewTokensCall__Inputs {
  _call: RegisterNewTokensCall;

  constructor(call: RegisterNewTokensCall) {
    this._call = call;
  }

  get currentNumberOfTokens(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get numberOfAdditionalTokens(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RegisterNewTokensCall__Outputs {
  _call: RegisterNewTokensCall;

  constructor(call: RegisterNewTokensCall) {
    this._call = call;
  }

  get oceanIds(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SafeBatchTransferFromCall extends ethereum.Call {
  get inputs(): SafeBatchTransferFromCall__Inputs {
    return new SafeBatchTransferFromCall__Inputs(this);
  }

  get outputs(): SafeBatchTransferFromCall__Outputs {
    return new SafeBatchTransferFromCall__Outputs(this);
  }
}

export class SafeBatchTransferFromCall__Inputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeBatchTransferFromCall__Outputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
