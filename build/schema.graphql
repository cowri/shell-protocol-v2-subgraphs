type User @entity {
    # Derived from event parameters
    id: ID! 

    # ERC20 wrap interactions that the user has done
    erc20Wraps: [ERC20Wrap!]! 

    # ERC20 unwrap interactions that the user has done
    erc20Unwraps: [ERC20Unwrap!]! 

    # ERC721 wrap interactions that the user has done
    erc721Wraps: [ERC721Wrap!]! 

    # ERC721 unwrap interactions that the user has done
    erc721Unwraps: [ERC721Unwrap!]! 

    # ERC1155 wrap interactions that the user has done
    erc1155Wraps: [ERC1155Wrap!]! 

    # ERC1155 unwrap interactions that the user has done
    erc1155Unwraps: [ERC1155Unwrap!]! 

    # Compute input amount interactions that the user has done
    computeInputAmounts: [ComputeInputAmount!]! 

    # Compute output amount interactions that the user has done
    computeOutputAmounts: [ComputeOutputAmount!]! 

    # Transfers between users that the user has been part of
    transfers: [UserTransfer!]!

    # Timestamp of when the user was first seen
    createdTimestamp: BigInt! 

    userBalances: [UserBalance!]!
}

type UserBalance @entity {
    # Derived from <userId>-<oceanId>
    id: ID!

    # Id of user that has the token
    user: User!

    # Id of token for the balance
    oceanId: String!

    # Token balance for that user
    balance: BigInt!
}

type UnwrapFee @entity {
    # It will always be 'UnwrapFeeId'
    id: ID! 

    # Derived from fee entity
    currentFee: Fee! 

    # List of previous fees
    previousFees: [Fee!]! 
}

type Fee @entity {
    # Defined as <transactionHash>-<senderAddress>
    id: ID! 

    # Derived from event parameters
    feeAmount: BigInt! 

    # Derived from event parameters
    owner: User! 

    # Transaction timestamp
    timestamp: BigInt! 

    # Transaction block
    block: BigInt! 
}

interface ExternalContract {
    # Derived from event parameters
    id: ID! 
    
    # Check if the external contract has been seen before
    recognized: Boolean!
}

type Primitive implements ExternalContract @entity {
    # Derived from event parameters as primitive
    id: ID! 

    # User addresses that have interacted with the primitive
    users: [User!]! 

    # Ocean tokens that the primitive has interacted with
    registeredTokens: [RegisteredToken!]! 

    # Timestamp when the primitive was first seen
    createdTimestamp: BigInt! 

    # Check if the primitive has been seen before
    recognized: Boolean!
}

type TokenRegistry @entity {
    # Derived from the transaction hash and the event log index
    id: ID!

    # Address that registered the tokens
    creator: String!

    # Ocean IDs of the registered tokens
    tokens: [RegisteredToken!]!

    # Transaction timestamp
    timestamp: BigInt!

    # Transaction block
    block: BigInt!
}

type RegisteredToken @entity {
    # Derived from tokens list in event parameters
    id: ID! 

    # Registered token supply
    supply: BigInt!                                                              

    # Primitive that registered the Ocean token
    issuer: Primitive! 

    # Transaction timestamp
    createdTimestamp: BigInt! 
}

type ERC20ExternalContract implements ExternalContract @entity {
    # Derived from event parameters as erc20Token
    id: ID! 
    
    # Derived with helper function 
    decimals: BigInt! 

    # Derived with helper function
    name: String! 

    # Derived with helper function
    symbol: String! 

    # Token supply
    wrappedAmount: BigInt! 

    # Aggregation of fees
    cumulativeFees: BigInt! 

    # Check if the external contract has been seen before
    recognized: Boolean!
}

type ERC721ExternalContract implements ExternalContract @entity {
    # Derived from event parameters as erc721Token
    id: ID! 

    # Token IDs that belong to the external contract
    tokenIds: [ERC721Token!]! 

    # Check if the external contract has been seen before
    recognized: Boolean!
}

type ERC721Token @entity {
    # Derived from event parameters as oceanId
    id: ID! 

    # Supply of token (can only be 0 or 1)
    wrappedOceanSupply: BigInt! 
}

type ERC1155ExternalContract implements ExternalContract @entity {
    # Derived from event parameters as erc1155Token
    id: ID! 

    # Token IDs that belong to the external contract
    tokenIds: [ERC1155Token!]! 

    # Check if the external contract has been seen before
    recognized: Boolean!
}

type ERC1155Token @entity {
    # Derived from event parameters as oceanId
    id: ID! 

    # Supply of token
    wrappedOceanSupply: BigInt! 

    # Aggregation of fees
    cumulativeFees: BigInt! 
}

type OceanTransaction @entity {
    # Derived from transaction hash
    id: ID! 
    
    # Mints involved in the Ocean transaction
    mints: [Mint!]! 
    
    # Burns involved in the Ocean transaction
    burns: [Burn!]! 
    
    # Interactions involved in the Ocean transaction
    interactions: [Interaction!]! 
    
    # User involved in the Ocean transaction
    user: User! 
    
    # Transaction timestamp
    timestamp: BigInt! 
    
    # Transaction block
    block: BigInt! 
}

interface Interaction {
    # Defined as <oceanTransactionId>-I-<interactionsCount>
    id: ID!

    # Derived from ExternalContract entity involved in interaction
    externalContract: ExternalContract!

    # Derived from event parameters as user
    user: User! 

    # Transaction timestamp
    timestamp: BigInt!

    # Transaction block
    block: BigInt!
}

type ERC20Wrap implements Interaction @entity {
    # Defined as <oceanTransactionId>-I-<interactionsCount>
    id: ID! 
    
    # Derived from ExternalContract entity involved in the interaction
    externalContract: ExternalContract! 
    
    # Derived from event parameters as oceanId
    wrappedTokenId: String! 
    
    # Derived from event parameters as transferredAmount
    transferredAmount: BigInt! 
    
    # Derived from event parameters as wrappedAmount
    wrappedAmount: BigInt! 
    
    # Derived from event parameters as dust
    dust: BigInt! 
    
    # Derived from event parameters as user
    user: User!  
    
    # Transaction timestamp
    timestamp: BigInt!  
    
    # Transaction block
    block: BigInt!
}

type ERC20Unwrap implements Interaction @entity {
    # Defined as <oceanTransactionId>-I-<interactionsCount>
    id: ID! 
    
    # Derived from ExternalContract entity involved in the interaction
    externalContract: ExternalContract! 
    
    # Derived from event parameters as oceanId
    wrappedTokenId: String! 
    
    # Derived from event parameters as transferredAmount
    transferredAmount: BigInt! 
    
    # Derived from event parameters as unwrappedAmount
    unwrappedAmount: BigInt! 
    
    # Derived from event parameters as feeCharged
    feeCharged: BigInt! 
    
    # Derived from event parameters as user
    user: User!  
    
    # Transaction timestamp
    timestamp: BigInt! 
    
    # Transaction block
    block: BigInt! 
}

type ERC721Wrap implements Interaction @entity {
    # Defined as <oceanTransactionId>-I-<interactionsCount>
    id: ID! 
    
    # Derived from ExternalContract entity involved in the interaction
    externalContract: ExternalContract! 
    
    # Derived from event parameters as oceanId
    wrappedTokenId: String! # Check
    
    # Derived from event parameters as user
    user: User!  
    
    # Transaction timestamp
    timestamp: BigInt!
    
    # Transaction block
    block: BigInt! 
}

type ERC721Unwrap implements Interaction @entity {
    # Defined as <oceanTransactionId>-I-<interactionsCount>
    id: ID!
    
    # Derived from ExternalContract entity involved in the interaction
    externalContract: ExternalContract! 
    
    # Derived from event parameters as oceanId
    wrappedTokenId: String! 
    
    # Derived from event parameters as user
    user: User! 
    
    # Transaction timestamp
    timestamp: BigInt! 
    
    # Transaction block
    block: BigInt! 
}

type ERC1155Wrap implements Interaction @entity {
    # Defined as <oceanTransactionId>-I-<interactionsCount>
    id: ID! 
    
    # Derived from ExternalContract entity involved in the interaction
    externalContract: ExternalContract!  
    
    # Derived from event parameters as oceanId
    wrappedTokenId: String! 
    
    # Derived from event parameters as wrappedAmount
    wrappedAmount: BigInt! 
    
    # Derived from event parameters as user
    user: User!  
    
    # Transaction timestamp
    timestamp: BigInt! 
    
    # Transaction block
    block: BigInt! 
}

type ERC1155Unwrap implements Interaction @entity {
    # Defined as <oceanTransactionId>-I-<interactionsCount>
    id: ID! 
    
    # Derived from ExternalContract entity involved in the interaction
    externalContract: ExternalContract! 
    
    # Derived from event parameters as oceanId
    wrappedTokenId: String!
    
    # Derived from event parameters as unwrappedAmount
    unwrappedAmount: BigInt! 
    
    # Derived from event parameters as feeCharged 
    feeCharged: BigInt! 
    
    # Derived from event parameters as user
    user: User!  
    
    # Transaction timestamp
    timestamp: BigInt! 
    
    # Transaction block
    block: BigInt! 
}

type ComputeInputAmount implements Interaction @entity {
    # Defined as <oceanTransactionId>-I-<interactionsCount>
    id: ID! 
    
    # Derived from ExternalContract entity involved in the interaction
    externalContract: ExternalContract! 
    
    # Derived from event parameters as inputToken 
    inputToken: String! 
    
    # Derived from event parameters as inputAmount 
    inputAmount: BigInt!
    
    # Derived from event parameters as outputToken
    outputToken: String! 
    
    # Derived from event parameters as outputAmount
    outputAmount: BigInt! 
    
    # Derived from event parameters as user
    user: User!  
    
    # Transaction timestamp
    timestamp: BigInt! 
    
    # Transaction block
    block: BigInt! 
}

type ComputeOutputAmount implements Interaction @entity {
    # Defined as <oceanTransactionId>-I-<interactionsCount>
    id: ID! 
    
    # Derived from ExternalContract entity involved in the interaction
    externalContract: ExternalContract!
    
    # Derived from event parameters as inputToken 
    inputToken: String! 
    
    # Derived from event parameters as inputAmount 
    inputAmount: BigInt! 
    
    # Derived from event parameters as outputToken
    outputToken: String! 
    
    # Derived from event parameters as outputAmount
    outputAmount: BigInt!
    
    # Derived from event parameters as user
    user: User!  
    
    # Transaction timestamp
    timestamp: BigInt!
    
    # Transaction block
    block: BigInt! 
}

type ForwarderTransaction @entity {
    # Defined as <transactionHash>-<eventLogIndex>
    id: ID!

    # Derived from event parameters as forwarder
    forwarder: String! # Maybe make it an entity?

    # Derived from transactionHash
    oceanTransaction: OceanTransaction!
}

type Mint @entity { 
    # Defined as <oceanTransactionId>-M-<countOfBurns>
    id: ID! 

    # Derived from event parameters
    to: String!

    # Derived from event parameters
    from: String!

    # Derived from event parameters as tokenId
    oceanToken: OceanToken!

    # Derived from event parameters as value
    amount: BigInt! 
}

type Burn @entity { 
    # Defined as <oceanTransactionId>-B-<countOfBurns>
    id: ID! 

    # Derived from event parameters
    to: String!

    # Derived from event parameters
    from: String!

    # Derived from event parameters as tokenId
    oceanToken: OceanToken! 

    # Derived from event parameters as value
    amount: BigInt! 
}

type UserTransfer @entity {
    # Defined as <transactionHash>-<eventLogIndex>
    id: ID! 

    # Derived from event parameters as from
    from: User! 

    # Derived from event parameters as to
    to: User! 

    # Derived from event parameters as tokenId
    oceanToken: OceanToken! 

    # Derived from event parameters as value
    amount: BigInt! 

    # Transaction timestamp
    timestamp: BigInt! 

    # Transaction block
    block: BigInt!
}

type OceanToken @entity {
    # Derived from event parameters as tokenId
    id: ID! 

    # Contract that the token belongs to
    sourceContract: String!

    # Type of token
    contractType: String!

    # Nonce derived from event
    contractNonce: BigInt

    # Supply of Ocean token
    supply: BigInt! 
}

type Warning @entity {
    # Defined as <warningType>-<interactionId>
    id: ID! 

    # Type of warning encountered
    type: String!

    # Description of warning encountered
    description: String!
    
    # Event type where warning was encountered
    event: String! 

    # Transaction timestamp
    timestamp: BigInt!
}
